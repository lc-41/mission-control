name: Build Voyager
on:
  push:
    branches:
      - main

env:
  # due to Reasons (see build-static.sh) this must both be a valid rust toolchain and docker.io/library/rust tag
  RUST_VER: '1.55'
  VCR_COMMIT: e8780bf964075251cd27b995cabe9c73ffeb26cc
  TAPES_DIGEST: sha256:bf6050d82413b64addb074e722ab2035b4505cca6c790279407b36d2c3a0dfe4

jobs:
  build-player:
    name: Build player
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            bindgen-clang-args: --sysroot /usr/aarch64-linux-gnu
            cargo-linker: aarch64-linux-gnu-gcc
            strip-prefix: aarch64-linux-gnu-
          - target: x86_64-pc-windows-msvc
            os: windows-2019
          - target: x86_64-apple-darwin
            os: macos-11
          - target: aarch64-apple-darwin
            os: macos-11
    runs-on: ${{ matrix.os }}
    env:
      CARGO_PROFILE_RELEASE_LTO: fat
      CARGO_PROFILE_RELEASE_OPT_LEVEL: z
      RUSTFLAGS: -C target-feature=+crt-static
      VOYAGER_CROSS_HACK: 1
      BINDGEN_EXTRA_CLANG_ARGS: ${{ matrix.bindgen-clang-args }}
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.cargo-linker }}
    steps:
      - run: sudo apt-get install -y llvm-dev libclang-dev clang
        if: ${{ matrix.os == 'ubuntu-20.04' }}
      - run: sudo apt-get install -y gcc-aarch64-linux-gnu
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
      - uses: KyleMayes/install-llvm-action@v1
        with:
          version: '12.0.1'
          directory: ${{ runner.temp }}/llvm
        if: ${{ matrix.os == 'windows-2019' }}
      - run: rustup default ${{ env.RUST_VER }}
      - run: rustup target add ${{ matrix.target }} --toolchain ${{ env.RUST_VER }}
      - uses: actions/checkout@v2
        with:
          repository: alisww/blaseball.vcr
          ref: ${{ env.VCR_COMMIT }}
          fetch-depth: 0
      - uses: chetan/git-restore-mtime-action@v1
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}
      - run: cargo +${{ env.RUST_VER }} build --release -p player --features bundle_before --target ${{ matrix.target }}
      - run: ${{ matrix.strip-prefix }}strip target/${{ matrix.target }}/release/player
        if: ${{ matrix.os != 'windows-2019' }}
      - uses: actions/upload-artifact@v2
        with:
          name: player-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/player
            target/${{ matrix.target }}/release/player.exe

  run-lipo:
    name: Create universal macOS binary
    needs: build-player
    runs-on: macos-11
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: player-x86_64-apple-darwin
          path: artifacts/player-x86_64-apple-darwin
      - uses: actions/download-artifact@v2
        with:
          name: player-aarch64-apple-darwin
          path: artifacts/player-aarch64-apple-darwin
      - run: lipo -create -output player artifacts/player-x86_64-apple-darwin/player artifacts/player-aarch64-apple-darwin/player
      - uses: actions/upload-artifact@v2
        with:
          name: player-universal-apple-darwin
          path: player

  build-static:
    name: Build static.zip and source.tar.zst
    runs-on: ubuntu-20.04
    steps:
      - run: sudo apt-get install -y git-restore-mtime hardlink
      - uses: actions/checkout@v2
        with:
          repository: alisww/blaseball.vcr
          ref: ${{ env.VCR_COMMIT }}
          path: blaseball.vcr
          fetch-depth: 0
      - uses: actions/checkout@v2
        path: scripts
      - run: ./scripts/build-static.sh
      - uses: actions/upload-artifact@v2
        with:
          name: static-and-source
          path: |
            static.zip
            source.tar.zst

  build-iso:
    name: Build ISO
    needs: [build-player, run-lipo, build-static]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        path: scripts
      - uses: actions/download-artifact@v2
        with:
          path: artifacts
      - run: ./scripts/build-iso.sh
      - run: |
          set -euxo pipefail
          eval `ssh-agent -s`
          ssh-add - <<< "${{ secrets.SSH_KEY }}"
          mkdir ~/.ssh
          echo "titan.voyager.sibr.dev ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAqq1x52soxzB++4uxArxXoKBT4d1J6MpnY/LZMnTXtbsQWqDBp5sysG7u5RCeyiKedLs41ICWvxt6ruiLHLhI0=" >> ~/.ssh/known_hosts
          ./scripts/upload-iso.sh
